class Solution {
    public int longestSubstring(String s, int k) {
        if(s.length()==k)
        {
            return 1;
        }
       int alph=find(s);
       
       int max=Integer.MIN_VALUE;
      for(int i=1;i<=alph;i++)
      {
           int t=ans(s,i,k);
           
           
           max=Math.max(max,t);

      }
      if(max==Integer.MIN_VALUE)
      {
          return 0;
      }
      return max;
    }
    public int find(String s)
    {
        Set<Character> set=new HashSet<>();
        int count=0;
        for(int i=0;i<s.length();i++)
        {
            set.add(s.charAt(i));
        }
        return set.size();
    }
    public int ans(String s,int n,int k)
    {
        int i=0,j=0,count=0;
        int max=0;
        HashMap<Character,Integer> map=new HashMap<>();
        while(j<s.length())
        {
           map.put(s.charAt(j),map.getOrDefault(s.charAt(j),0)+1);
        
        if(map.size()==n)
        {
            boolean a=true;
            for(char c:map.keySet())
            {
                if(map.get(c)<k)
                {
                    a=false;
                }
            }
            if(a)
            {
                max=Math.max(max,j-i+1);
            }
        }
           if(map.size()>n)
           {
           
               
               while(map.size()>n)
               {
                   map.put(s.charAt(i),map.get(s.charAt(i))-1);
                     
                   if(map.get(s.charAt(i))==0)
                   {
                       map.remove(s.charAt(i));
                      
                   }
                   i++;
               }
              
           }
          j++;

        }
        return max;
}
}
